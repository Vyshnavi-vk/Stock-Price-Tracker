[{"C:\\Users\\lenovo\\OneDrive\\Desktop\\Projects\\Mini Stock Price Tracker\\client\\src\\index.js":"1","C:\\Users\\lenovo\\OneDrive\\Desktop\\Projects\\Mini Stock Price Tracker\\client\\src\\App.js":"2","C:\\Users\\lenovo\\OneDrive\\Desktop\\Projects\\Mini Stock Price Tracker\\client\\src\\updatePerMinute.js":"3","C:\\Users\\lenovo\\OneDrive\\Desktop\\Projects\\Mini Stock Price Tracker\\client\\src\\UpdatePerMinute.js":"4"},{"size":258,"mtime":1700405811105,"results":"5","hashOfConfig":"6"},{"size":1931,"mtime":1700405798306,"results":"7","hashOfConfig":"6"},{"size":983,"mtime":1700401310379,"results":"8","hashOfConfig":"6"},{"size":984,"mtime":1700405845391,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1h45n6r",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\Users\\lenovo\\OneDrive\\Desktop\\Projects\\Mini Stock Price Tracker\\client\\src\\index.js",[],[],"C:\\Users\\lenovo\\OneDrive\\Desktop\\Projects\\Mini Stock Price Tracker\\client\\src\\App.js",["24","25"],[],"import './App.css';\nimport { useEffect, useState } from 'react'\nimport axios from \"axios\"\nimport UpdatePerMinute from './UpdatePerMinute.js';\n\n\nlet price\n\n\nfunction App() {\n\n  const [value, setValue] = useState('Choose');\n  const [stocks, setStocks] = useState([]);\n  const [show, setShow] = useState(false)\n\n\n  const fetchData = async () => {\n\n    const { data } = await axios.get('/api/stock')\n    setStocks(data)\n  }\n\n\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n\n  const handleClick = () => {\n    setShow(true);\n  }\n\n\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n    setShow(false)\n  };\n\n\n  return (\n    <>\n      <h1\n        className='title'\n      >Welcome to Stock Price Tracker</h1>\n\n      {value != 'Choose' ?\n        <p className='p'>You have selected {value}</p>\n        : <p className='p'>Please make a selection</p>\n      }\n\n      <div className='select-options'>\n        <select className='values' value={value} onChange={handleChange}>\n          <option>Choose</option>\n          <option value=\"Reliance\">Reliance</option>\n          <option value=\"TCS\">TCS</option>\n          <option value=\"HDFC Bank\">HDFC Bank</option>\n          <option value=\"Infosys\">Infosys</option>\n          <option value=\"Zomato\">Zomato</option>\n          <option value=\"ONGC\">ONGC</option>\n          <option value=\"Nestle\">Nestle</option>\n          <option value=\"Coal India\">Coal India</option>\n          <option value=\"Siemens\">Siemens</option>\n          <option value=\"Cipla\">Cipla</option>\n        </select>\n      </div>\n\n\n\n      {stocks.map(stock => {\n        if (value === stock.name) {\n          price = stock.currPrice\n        }\n      }\n      )}\n\n      <button className='button' onClick={handleClick}>\n        Display Price\n      </button>\n\n      {show ?\n        <div className='container'>\n          <UpdatePerMinute price={price} />\n        </div> :\n        <></>\n      }\n\n    </>\n  );\n}\n\nexport default App;\n","C:\\Users\\lenovo\\OneDrive\\Desktop\\Projects\\Mini Stock Price Tracker\\client\\src\\updatePerMinute.js",["26"],[],"C:\\Users\\lenovo\\OneDrive\\Desktop\\Projects\\Mini Stock Price Tracker\\client\\src\\UpdatePerMinute.js",["27"],[],"import React, { useEffect, useState } from 'react'\r\n\r\n\r\nconst UpdatePerMinute = ({ price }) => {\r\n    const [data, setData] = useState(price)\r\n    const [prev, setPrev] = useState(price)\r\n    let prevPrice = price\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            let random = Number.parseFloat((Math.floor(Math.random() * (97.6 - (-97.1) + 1))) + -97.1)\r\n            console.log(Number(price) + random + \",\" + prevPrice)\r\n            setPrev(prevPrice)\r\n            setData(Number(price) + random)\r\n            prevPrice = (Number(price) + random)\r\n        }, 60000);\r\n\r\n        // Clearing the interval \r\n        return () => clearInterval(interval);\r\n    }, [price]);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1\r\n                style={{\r\n                    color: parseFloat(data) > parseFloat(prev) ? 'green' : 'red'\r\n                }}\r\n\r\n\r\n            >{data}\r\n            </h1>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UpdatePerMinute\r\n",{"ruleId":"28","severity":1,"message":"29","line":48,"column":14,"nodeType":"30","messageId":"31","endLine":48,"endColumn":16},{"ruleId":"32","severity":1,"message":"33","line":71,"column":25,"nodeType":"34","messageId":"35","endLine":71,"endColumn":27},{"ruleId":"36","severity":1,"message":"37","line":15,"column":26,"nodeType":"30","endLine":15,"endColumn":48},{"ruleId":"36","severity":1,"message":"37","line":15,"column":26,"nodeType":"30","endLine":15,"endColumn":48},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","Assignments to the 'prevPrice' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect."]