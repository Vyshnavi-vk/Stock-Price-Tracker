{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\OneDrive\\\\Desktop\\\\Projects\\\\Mini Stock Price Tracker\\\\client\\\\src\\\\Poll.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Text } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Poll = ({\n  price\n}) => {\n  _s();\n  const [data, setData] = useState(price);\n  const [prev, setPrev] = useState(price);\n  let prevPrice = price;\n  let setColor = false;\n  useEffect(() => {\n    const interval = setInterval(() => {\n      let random = Number.parseFloat(Math.floor(Math.random() * (97.6 - -97.1 + 1)) + -97.1);\n      console.log(Number(price) + random + \",\" + prevPrice);\n      // if (parseFloat(Number(price) + random) > parseFloat(prevPrice)) console.log('true')\n      setPrev(prevPrice);\n      setData(Number(price) + random);\n      prevPrice = Number(price) + random;\n    }, 4000);\n\n    // Clearing the interval \n    return () => clearInterval(interval);\n  }, [price]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Text, {\n      className: \"container\",\n      style: {\n        base: \"24px\",\n        md: \"40px\",\n        lg: \"56px\",\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        textAlign: 'center',\n        marginLeft: '43%',\n        backgroundColor: 'gray',\n        marginTop: '40px',\n        height: '200PX',\n        width: '300px',\n        color: parseFloat(data) > parseFloat(prev) ? 'green' : 'red'\n      },\n      children: [data, parseFloat(data) > parseFloat(prev) ? setColor = true : setColor = false]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Poll, \"iz3XNMBM/UvXqUHRRKZ4xZU7SG4=\");\n_c = Poll;\nexport default Poll;\nvar _c;\n$RefreshReg$(_c, \"Poll\");","map":{"version":3,"names":["React","useEffect","useState","Text","jsxDEV","_jsxDEV","Fragment","_Fragment","Poll","price","_s","data","setData","prev","setPrev","prevPrice","setColor","interval","setInterval","random","Number","parseFloat","Math","floor","console","log","clearInterval","children","className","style","base","md","lg","display","alignItems","justifyContent","textAlign","marginLeft","backgroundColor","marginTop","height","width","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/lenovo/OneDrive/Desktop/Projects/Mini Stock Price Tracker/client/src/Poll.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Text } from '@chakra-ui/react'\r\n\r\n\r\nconst Poll = ({ price }) => {\r\n    const [data, setData] = useState(price)\r\n    const [prev, setPrev] = useState(price)\r\n    let prevPrice = price\r\n    let setColor = false\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            let random = Number.parseFloat((Math.floor(Math.random() * (97.6 - (-97.1) + 1))) + -97.1)\r\n            console.log(Number(price) + random + \",\" + prevPrice)\r\n            // if (parseFloat(Number(price) + random) > parseFloat(prevPrice)) console.log('true')\r\n            setPrev(prevPrice)\r\n            setData(Number(price) + random)\r\n            prevPrice = (Number(price) + random)\r\n        }, 4000);\r\n\r\n        // Clearing the interval \r\n        return () => clearInterval(interval);\r\n    }, [price]);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Text className='container'\r\n                style={{\r\n                    base: \"24px\", md: \"40px\", lg: \"56px\",\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    textAlign: 'center',\r\n                    marginLeft: '43%',\r\n                    backgroundColor: 'gray',\r\n                    marginTop: '40px',\r\n                    height: '200PX',\r\n                    width: '300px',\r\n                    color: parseFloat(data) > parseFloat(prev) ? 'green' : 'red'\r\n                }}\r\n\r\n\r\n            >{data}\r\n                {parseFloat(data) > parseFloat(prev) ? setColor = true : setColor = false}\r\n            </Text>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Poll\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGvC,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAACO,KAAK,CAAC;EACvC,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAACO,KAAK,CAAC;EACvC,IAAIM,SAAS,GAAGN,KAAK;EACrB,IAAIO,QAAQ,GAAG,KAAK;EAEpBf,SAAS,CAAC,MAAM;IACZ,MAAMgB,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/B,IAAIC,MAAM,GAAGC,MAAM,CAACC,UAAU,CAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACH,MAAM,CAAC,CAAC,IAAI,IAAI,GAAI,CAAC,IAAK,GAAG,CAAC,CAAC,CAAC,GAAI,CAAC,IAAI,CAAC;MAC1FK,OAAO,CAACC,GAAG,CAACL,MAAM,CAACX,KAAK,CAAC,GAAGU,MAAM,GAAG,GAAG,GAAGJ,SAAS,CAAC;MACrD;MACAD,OAAO,CAACC,SAAS,CAAC;MAClBH,OAAO,CAACQ,MAAM,CAACX,KAAK,CAAC,GAAGU,MAAM,CAAC;MAC/BJ,SAAS,GAAIK,MAAM,CAACX,KAAK,CAAC,GAAGU,MAAO;IACxC,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAMO,aAAa,CAACT,QAAQ,CAAC;EACxC,CAAC,EAAE,CAACR,KAAK,CAAC,CAAC;EAIX,oBACIJ,OAAA,CAAAE,SAAA;IAAAoB,QAAA,eACItB,OAAA,CAACF,IAAI;MAACyB,SAAS,EAAC,WAAW;MACvBC,KAAK,EAAE;QACHC,IAAI,EAAE,MAAM;QAAEC,EAAE,EAAE,MAAM;QAAEC,EAAE,EAAE,MAAM;QACpCC,OAAO,EAAE,MAAM;QACfC,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE,QAAQ;QACxBC,SAAS,EAAE,QAAQ;QACnBC,UAAU,EAAE,KAAK;QACjBC,eAAe,EAAE,MAAM;QACvBC,SAAS,EAAE,MAAM;QACjBC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE,OAAO;QACdC,KAAK,EAAErB,UAAU,CAACV,IAAI,CAAC,GAAGU,UAAU,CAACR,IAAI,CAAC,GAAG,OAAO,GAAG;MAC3D,CAAE;MAAAc,QAAA,GAGJhB,IAAI,EACDU,UAAU,CAACV,IAAI,CAAC,GAAGU,UAAU,CAACR,IAAI,CAAC,GAAGG,QAAQ,GAAG,IAAI,GAAGA,QAAQ,GAAG,KAAK;IAAA;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvE;EAAC,gBACT,CAAC;AAEX,CAAC;AAAApC,EAAA,CA7CKF,IAAI;AAAAuC,EAAA,GAAJvC,IAAI;AA+CV,eAAeA,IAAI;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}